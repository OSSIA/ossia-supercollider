TITLE:: OSSIA_Parameter
summary:: value-holding nodes
categories:: Ossia
related:: Classes/OSSIA_Node, Classes/OSSIA_Device, Guides/OssiaReference

DESCRIPTION::
in strong::Ossia::, a parameter is a very specific kind of node, which holds strong::values :: and certain types of strong::attributes::.


CLASSMETHODS::

METHOD:: new
the main constructor class method for parameters, certain attributes can be directly set at instantiation:

ARGUMENT:: parent_node
strong::required:: - an code::OSSIA_Device::, code::OSSIA_Node:: or code::OSSIA_Parameter::

ARGUMENT:: name
strong::required:: - the node's identifier on the network

ARGUMENT:: type
strong::required:: - the type of the values the parameter may hold:
list::
## code::Integer::,
## code::Float::,
## code::Boolean::,
## code::Impulse::,
## code::String::,
## code::Char::
## code::Array::, or code::List::
## code::OSSIA_vec2f::,
## code::OSSIA_vec3f::,
## code::OSSIA_vec4f::
::

ARGUMENT:: domain
emphasis::optional:: - a strong::min/max range:: and/or a strong::set of accepted values::.
Passing an array of two values, e.g.: code::[0, 127]::, will set the min/max range.

Passing an array of three values (with the third as an array) will set both min/max range and accepted values, e.g. : code::[0, 127, [0, 64, 88, 127]]:: .

A convenience class (code::OSSIA_domain::) also exists.


ARGUMENT:: default_value
emphasis::optional:: - sets the value of the parameter at instantiation

ARGUMENT:: bounding_mode
emphasis::optional:: - sets the bounds' clipping mode when setting new values (defaults to code::'free'::):
list::
## code::'free':: - no clipping, domain is only indicative
## code::'clip':: - clipped to the closest value in the range
## code::'low':: - only clips values lower than the min
## code::'high':: - only clips values higher than the max
## code::'wrap':: - wraps values around the range
## code::'fold':: - folds back values into the range
::

ARGUMENT:: critical
strong::OSCQuery server protocol only:: - if code::true::, messages will be sent in strong::tcp :: instead of classic emphasis::osc-udp::, this guarantees that the message will be received on the other end of the network.

ARGUMENT:: repetition_filter
if code::true::, sending the same value multiple times will have no effect, it will only send it the first time.

returns:: an code::OSSIA_Parameter::


INSTANCEMETHODS::

METHOD:: access_mode
gets/sets the parameter's access mode.

ARGUMENT:: aSymbol
accepted values are:
list::
## code::'bi'::, code::'both'::, or code::'rw':: - parameter value is in read-write mode.
## code::'set'::, code::'w':: - parameter value is in strong::write-only:: mode (set).
## code::'get'::, code::'r':: - parameter value is in strong::read-only:: mode (get).
::

A convenience class(code::OSSIA_access_mode::) can also be used, emphasis::e.g.:: code::OSSIA_access_mode.get::

returns:: a code::Symbol:: with the access mode identifier

METHOD:: value
sets/gets the parameter's value

ARGUMENT:: value
a value, depending on the parameter's type

returns:: a value

METHOD:: sv
strong::shortcut::, sets the parameter's value

ARGUMENT:: value
a value

METHOD:: v
strong::shortcut::, gets/sets the parameter's value

METHOD:: callback
Parameter callbacks will inform you every time a parameter receives a message. On environments that support this, this will enable listening on the remote end. That is, if a remote device has no callbacks, network messages won't be sent upon modification.

ARGUMENT:: aFunction
to be evaluated whenever the parameter updates its value, it is passed the code::|value|:: argument, strong::e.g.:: :

code::~param.callback = { |value| format("value received: %", value).postln;
}
::

METHOD:: critical
strong::OSCQuery protocol only:: - if code::true::, messages will be sent in strong::tcp :: instead of classic emphasis::osc-udp::, this guarantees that the message will be received on the other end of the network.

METHOD:: repetition_filter
When the repetition filter is enabled, if the same value is sent twice, the second time will be filtered.

METHOD:: bounding_mode
sets the bounds' clipping mode when setting new values (defaults to code::'free'::):

ARGUMENT:: aSymbol
accepted values are:
list::
## code::'free':: - no clipping, domain is only indicative
## code::'clip':: - clipped to the closest value in the range
## code::'low':: - only clips values lower than the min
## code::'high':: - only clips values higher than the max
## code::'wrap':: - wraps values around the range
## code::'fold':: - folds back values into the range
::

METHOD:: domain
Domains allow to set a range of accepted values for a given parameter.

ARGUMENT:: aList
a strong::min/max range:: or a strong::set of accepted values::.
Passing an array of strong::two values::, e.g.: code::[0, 127]::, will set the min/max range.

Passing an array of strong::three values:: (with an code::Array:: as the third one), will set strong::both:: min/max range and accepted values, e.g. code::[0, 127, [0, 32, 64, 88, 127]]::

A convenience class (code::OSSIA_domain::) can also be used.

code::
OSSIA_domain(0, 127);
// only min/max range

OSSIA_domain(values: [0, 32, 64, 88, 127]);
// only accepted values

OSSIA_domain(0, 127, [0, 32, 64, 88, 127]);
// both
::

METHOD:: priority
Nodes with the highest priority should execute first.

METHOD:: unit
Units give a semantic meaning to the value of a parameter. See reference for a complete list of units.

ARGUMENT:: aUnit
e.g. code::OSSIA_color.argb::

METHOD::aar
convenience method when instantiating new code::Synth:: (see link::Guides/OssiaReference:: for examples)

returns:: an code::Array:: with the parameter's unique name and its current value

METHOD::ar
convenience method for audio-rate code::SynthDef::-binding (see link::Guides/OssiaReference:: for examples)

METHOD::kr
convenience method for control-rate code::SynthDef::-binding (see link::Guides/OssiaReference:: for examples)

EXAMPLES::

code::
(some example code)
::